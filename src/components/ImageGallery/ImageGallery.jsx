import { getApi } from '../../utils/Api';
import PropTypes from 'prop-types';
import { useEffect, useState } from 'react';
import { toast } from 'react-toastify';
import { ImageGalleryItem } from '../ImageGalleryItem/ImageGalleryItem';
import { Loader } from 'components/Loader/Loader';
import { Button } from '../Button/Button';
import { List } from './ImageGallery.styled';

export const ImageGallery = ({ nextName }) => {
  const [name, setName] = useState('');
  const [page, setPage] = useState(1);
  const [listImage, setListImage] = useState(null);
  const [visibleBtnLoading, setVisibleBtnLoading] = useState(false);
  const [isLoader, setIsLoader] = useState(false);

  const getPage = () => {
    setPage(page => page + 1);
  };
  //–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑—É –∫–Ω–æ–ø–∫–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —â–µ
  const onVisibleBtnLoading = hits => {
    if (hits.length / 12 === 1) {
      setVisibleBtnLoading(true);
      toast.success('‚úÖ –ó–∞–ø–∏—Ç –ø—Ä–æ–π—à–æ–≤ —É—Å–ø—ñ—à–Ω–æ');
    } else if (hits.length === 0) {
      setVisibleBtnLoading(false);
      toast.warn(
        'ü§î –ù–∞ –∂–∞–ª—å –ø–æ –¥–∞–Ω–æ–º—É –∑–∞–ø–∏—Ç—É –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –∑–∞–ø–∏—Ç!üìù'
      );
    } else {
      setVisibleBtnLoading(false);
      toast.info('–¶–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ñ–æ—Ç–æ –ø–æ –¥–∞–Ω–Ω—ñ–π —Ç–µ–º—ñ!!!‚úÖ');
    }
  };
  // –∑–∞–ø–∏—Ç –ø—Ä–∏ —Å–∞–º–±–º—ñ—Ç—ñ —Ñ–æ—Ä–º–∏ –ø–æ—à—É–∫—É
  useEffect(() => {
    if (nextName === '' || name === nextName) {
      return;
    }
    setPage(1);
    setListImage([]);
    getApi(1, nextName, setIsLoader).then(res => {
      setListImage(res.hits);
      onVisibleBtnLoading(res.hits);
    });
    setName(nextName);
  }, [name, nextName]);

  //–∑–∞–ø–∏—Ç –ø—Ä–∏ –¥–æ–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ —Ñ–æ—Ç–æ –ø—Ä–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ –∫–Ω–æ–ø–∫–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —â–µ
  useEffect(() => {
    if (page === 1 || name !== nextName) {
      return;
    }
    try {
      getApi(page, nextName, setIsLoader).then(res => {
        setListImage(prevState => [...prevState, ...res.hits]);
        onVisibleBtnLoading(res.hits);
      });
    } catch (error) {
      setVisibleBtnLoading(false);
      toast.warn(
        'ü§î –ù–∞ –∂–∞–ª—å –ø–æ –¥–∞–Ω–æ–º—É –∑–∞–ø–∏—Ç—É –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –∑–∞–ø–∏—Ç!üìù'
      );
    }
  }, [name, nextName, page]);

  return (
    <>
      <List>
        {listImage &&
          listImage.map(item => <ImageGalleryItem key={item.id} item={item} />)}
      </List>
      <Loader visible={isLoader} />
      {visibleBtnLoading && !isLoader && <Button onClick={getPage} />}
    </>
  );
};

ImageGallery.propTypes = {
  nextName: PropTypes.string,
};
